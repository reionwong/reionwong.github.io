<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Reion's Think</title><link>/tags/linux/</link><description>Recent content in Linux on Reion's Think</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 07 Jul 2024 12:05:11 +0800</lastBuildDate><atom:link href="/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Mesa EGL Draft</title><link>/posts/linux/mesa_draft/</link><pubDate>Sun, 07 Jul 2024 12:05:11 +0800</pubDate><guid>/posts/linux/mesa_draft/</guid><description>抽象层设计思想 在 mesa 中，由于是 C 语言编写，没有面向对象的概念，主要使用了结构体和函数指针等基本特性来实现抽象数据类型和多态性。 EGL 模块中的每个对象都是一个结构体，例如 EGLDisplay、EGLSurface、EGLContext 等。这些结构体包含了对象的属性和方法，例如对象句柄、引用计数等。 为了实现多态性，EGL 模块中使用了函数指针来实现虚函数的概念。例如，每个 EGLDisplay 对象都有一个指向 EGLDisplayOps 结构体的指针，该结构体包含了操作 EGLDisplay 对象的函数指针，例如 initialize、terminate 等。这样，在调用 EGLDisplay 对象的函数时，可以通过指针调用正确的操作函数，从而实现多态性和动态绑定。
以下是一个例子： dri2_egl_display_vtbl 结构体的定义（src/egl/drivers/dri2/egl_dri2.h）：</description></item></channel></rss>