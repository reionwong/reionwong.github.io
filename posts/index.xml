<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Reion's Think</title><link>/posts/</link><description>Recent content in Posts on Reion's Think</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 04 Jun 2023 12:47:51 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How KDE Plasma Badge Works</title><link>/posts/kde/kde-badge/</link><pubDate>Sun, 04 Jun 2023 12:47:51 +0800</pubDate><guid>/posts/kde/kde-badge/</guid><description>I logged into my telegram in KDE Plasma today, and found that the two are integrated so well, just like the title of this article says &amp;ldquo;Badge&amp;rdquo;, please see the screenshot bwlow:</description></item><item><title>Emacs Dired Mimeicon mode</title><link>/posts/emacs/dired-mimeicon/</link><pubDate>Fri, 26 May 2023 16:47:51 +0800</pubDate><guid>/posts/emacs/dired-mimeicon/</guid><description>This extension allows to display file and folder icons in dired mode and uses mimetype as the displayed logo and adheres to the icon-theme-spec file naming convention, which will help you to apply icon themes that you can download from the internet in your emacs.</description></item><item><title>QQ for Linux 官方版本终于能用了</title><link>/posts/linux/qq-for-linux/</link><pubDate>Thu, 08 Dec 2022 00:30:29 +0800</pubDate><guid>/posts/linux/qq-for-linux/</guid><description>最早在 2019 年参加某个会时，就打听到了 QQ 已经在规划使用 Electron 技术进行重写 Linux 版，两年过去了，直到今年 12.7 开始公测，需要加群才能登陆
依旧是仅支持扫码登陆，不过还好，我已经忘记了自己的 QQ 密码了 (
优点 与 macOS 版 QQ UI 保持统一设计语言 支持 Dark Mode 和 Light Mode 主题切换 表情包、emoji 可正常使用 在 x 窗管下可截图，wayland 没试过 手机上可识别登陆设备为 Linux 吐槽 点击关闭按钮是相应的动作是最小化，倒是加托盘啊&amp;hellip; 外观跟随系统如何响应，试了下修改 gtk 主题无法响应&amp;hellip; 无法跨设备传文件、发送消息</description></item><item><title>A Notification Design Idea</title><link>/posts/cutefish/notification_design_idea/</link><pubDate>Sun, 27 Nov 2022 14:03:28 +0800</pubDate><guid>/posts/cutefish/notification_design_idea/</guid><description>I recently saw a new design for the front screen of the iPhone 14 pro series, whice they call &amp;ldquo;Dynamic island&amp;rdquo;, and there&amp;rsquo;s where I got my inspiration.</description></item><item><title>Cutefish Menu Bar Chameleon</title><link>/posts/cutefish/cutefish_menubar_chameleon/</link><pubDate>Mon, 25 Jul 2022 12:03:28 +0800</pubDate><guid>/posts/cutefish/cutefish_menubar_chameleon/</guid><description>A new feature introduced in the macOS Big Sur version of the top menu bar is that the menu bar background color adapts to the desktop wallpaper for a more integrated effect than before.</description></item><item><title>C++ PIMPL 设计模式</title><link>/posts/cpp/cpp-pimpl/</link><pubDate>Sat, 27 Oct 2018 12:22:11 +0800</pubDate><guid>/posts/cpp/cpp-pimpl/</guid><description>PIMPL 被称为 pointer to implementation 或 private implementation，在很多 C++ 项目/开发库中都是很常见的，比如 deepin 的 dtkwidget 项目，简单理解就是在公共接口里封装私有数据和方法，它将类的实现细节放在分离的指针访问类中。该方法用于构造稳定的 ABI 的 C++ 库接口，及减少编译时依赖。
实现 在现代 C++ 不鼓励使用 owning raw pointers，我们可以使用智能指针实现 PIMPL。</description></item><item><title>Percentage of year passed</title><link>/posts/cpp/percentage_of_year_passed/</link><pubDate>Mon, 15 Oct 2018 16:47:51 +0800</pubDate><guid>/posts/cpp/percentage_of_year_passed/</guid><description>Last night in the App Store, I saw an app that provides a widget to show how much percentage of the year has passed, it reminds you to value your time, every 52 minutes, the percentage will increase by 0.</description></item><item><title>深度文件管理器文件拷贝原理</title><link>/posts/deepin/dde-filemanager-cp/</link><pubDate>Tue, 02 Oct 2018 14:26:22 +0800</pubDate><guid>/posts/deepin/dde-filemanager-cp/</guid><description>看了深度文件管理器 filejob 这个模块之后，对它的拷贝文件原理也了解了一下。
大概是这么一个流程：
传入两个类型为 QString 的变量：源文件地址(fromPath)、目标目录(tarDir) 求出目标文件完整地址：目标目录 + 源文件名，targetPath = tarDir + fromPath.fileName() 定义了写入数据块大小：DATA_BLOCK_SIZE 为 65536 创建两个 QFile 对象（源文件地址与目标文件地址） 调用 QFile::open() 方法，源文件打开模式为只读（ReadOnly），目标文件打开模式为只写（WriteOnly） 调用 QIODevice::read() 方法，每次读取一块字节数据，会返回读取的字节数（如果为0则代表拷贝成功，-1 说明失败） 调用 QIODevice::write() 循环写入一个数据块，也会返回写入的字节数，如果为0就会停止循环，说明文件拷贝成功 使用 Qt 读写类 QFile 来进行文件读写操作，都会调用到系统 open、read、write&amp;hellip;</description></item></channel></rss>